<h1>Learning Clojure</h1>

<p>Welcome to learning Clojure!<p>

<p>Clojure is a JVM-based Lisp dialect which means you have full access to Java's rich, mature API and the myriad of libraries that have been implemented for Java over the last 15 years.
Being a Lisp, so all of the advantages that apply to Lisps apply to Clojure. Here's a good essay by Paul Graham describing some of the <a href="http://www.paulgraham.com/diff.html">core values of Lisps</a>.
</p>
<p>
Because "code is data", you can do really neat things with macros. For example, some of Java's hot new languages features included a for-each loop in Java 5 and a try-with-resources statement in Java 7; it would be fairly easy to write Clojure macros that extends Clojure to do the exact same things without having to wait for years for the next version of Java.
</p>
<p>
Clojure is designed for concurrency. It offers immutable data structures, functional programming with zero side-effects, Software Transaction Memory built in, etc. You can focus your engineering efforts on features instead of concurrency details.
</p>

<section>
  <ol>
    <li><strike><a href="/path-step-1">Setup your environment</a></strike></li>
    <li><strike><a href="/path-step-2">Clojure Koans</a></strike></li>
    <li><strike><a href="/path-step-3">Read "Clojure for the Brave"</a></strike></li>
    <li><strike><a href="/path-step-4">Do 4Clojure</a></strike></li>
    <li><strong><a href="/path-step-5">Write a TicTactoe</a></strong></li>
    <li><a href="/path-step-6">Write A Web Server</a></li>
    <li><a href="/path-step-7">Read "The Joy of Clojure"</a></li>
  </ol>
</section>

<button>Start working</button>
